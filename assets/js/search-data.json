{
  
    
        "post0": {
            "title": "Title",
            "content": "class Shape: pass class Shape(): pass class Shape(object): pass . class Shape: def __init__(self, shape_type): self.__type = shape_type def get_type(self): return self.__type . circle = Shape(&quot;circle&quot;) type(circle) . __main__.Shape . circle.get_type() . &#39;circle&#39; . square = Shape(&quot;square&quot;) type(square) . __main__.Shape . class Shape: def __init__(self, shape_type, color=&quot;Red&quot;): # optional self.__type = shape_type self.__color = color def get_type(self): return self.__type def get_color(self): return self.__color def get_area(self): pass def get_perimeter(self): pass . circle = Shape(&quot;circle&quot;) circle.get_color() . &#39;Red&#39; . class Circle(Shape): pass . circle = Circle(&quot;circle&quot;) . type(circle) . __main__.Circle . class Circle(Shape): def __init__(self): Shape.__init__(self, &quot;circle&quot;) . class Square(Shape): def __init__(self): Shape.__init__(self, &quot;square&quot;) . circle = Circle() square = Square() circle.get_type(), square.get_type() . (&#39;circle&#39;, &#39;square&#39;) . class Circle(Shape): def __init__(self, color=&quot;green&quot;): Shape.__init__(self, &quot;circle&quot;, color) . circle = Circle() circle.get_color() . &#39;green&#39; . import math class Circle(Shape): def __init__(self, radius, color=&quot;green&quot;): Shape.__init__(self, &quot;circle&quot;, color) self.__radius = radius def get_area(self): return math.pi * self.__radius * self.__radius def get_perimeter(self): return 2 * math.pi * self.__radius . circle = Circle(5, color=&quot;orange&quot;) circle.get_area() . 78.53981633974483 . help(Circle) . Help on class Circle in module __main__: class Circle(Shape) | Circle(radius, color=&#39;green&#39;) | | Method resolution order: | Circle | Shape | builtins.object | | Methods defined here: | | __init__(self, radius, color=&#39;green&#39;) | Initialize self. See help(type(self)) for accurate signature. | | get_area(self) | | get_perimeter(self) | | - | Methods inherited from Shape: | | get_color(self) | | get_type(self) | | - | Data descriptors inherited from Shape: | | __dict__ | dictionary for instance variables (if defined) | | __weakref__ | list of weak references to the object (if defined) . import math class Circle(Shape): def __init__(self, radius, color=&quot;green&quot;): super().__init__(self, &quot;circle&quot;, color) # super is also possible self.__radius = radius def get_area(self): return math.pi * self.__radius * self.__radius def get_perimeter(self): return 2 * math.pi * self.__radius . issubclass(Circle, Shape) . True . # Multiple and Multilevel Inheritance class Father: pass class Mother: pass . class Child1(Father, Mother): pass . help(Child1) . Help on class Child1 in module __main__: class Child1(Father, Mother) | Method resolution order: | Child1 | Father | Mother | builtins.object | | Data descriptors inherited from Father: | | __dict__ | dictionary for instance variables (if defined) | | __weakref__ | list of weak references to the object (if defined) . class Father: def height(self): print(&quot;I have inherited my height from my father&quot;) class Mother: def intelligence(self): print(&quot;I have inherited my intelligence from my mother&quot;) class Child(Father, Mother): def experience(self): print(&quot;My experience are all my own&quot;) . c = Child() c.height() . I have inherited my height from my father . c.intelligence() . I have inherited my intelligence from my mother . # Polymorphism class Hominidae(): def communication(self): print(&quot;They use auditory calls and visual cues.&quot;) def walk(self): print(&quot;They are knuckle-walkers, used to hang and swing from one tree to another.&quot;) class Human(Hominidae): def communication(self): print(&quot;They use language to communicate.&quot;) def walk(self): print(&quot;They are bipeds.&quot;) class Gorilla(Hominidae): def communication(self): print(&quot;They use twenty-five distinct vocalizations to communicate.&quot;) def walk(self): print(&quot;They are knuckle-walkers.&quot;) hominidae_1 = Hominidae() human_1 = Human() gorilla_1 = Gorilla() . hominidae_1.communication() human_1.communication() gorilla_1.communication() . They use auditory calls and visual cues. They use language to communicate. They use twenty-five distinct vocalizations to communicate. . .",
            "url": "https://elydora.github.io/DataScienceBlog/2020/06/26/Working-with-Inheritance.html",
            "relUrl": "/2020/06/26/Working-with-Inheritance.html",
            "date": " • Jun 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "# model more complex real world entities # Classes -&gt; have State (Attributes) and Behavior (Perform Actions) . # class is the blueprint for an entity # each entity is known as an instance or object # each objects has its own independent existence . # keyword class Name: # attributes are called member variables # functions perform actions on the member variables -&gt; called member functions # no limit for vars/functions . # Variables: # Class variables -&gt; associated with the class itself; shared by all objects of the class # - declared outside of any method # - referred to by class name # Instance variables -&gt; associated with objects of a class; exclusive property # - declared inside any method # - referred using the self keyword . # member functions -&gt; perform actions, update state, return state . # Inheritance # tries to capture the similarities and differences in real-world entities # Portray relationships # base, parent, super class | derived, child class, subclass . # Object-oriented programming # Polymorphism - the ability of an object to behave in multiple ways # Encapsulation of data # Clear modular structure for code # Provides abstractions and data encapsulation # Easy to maintain and reuse code # Model real-world entities .",
            "url": "https://elydora.github.io/DataScienceBlog/2020/06/26/Introduction.html",
            "relUrl": "/2020/06/26/Introduction.html",
            "date": " • Jun 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "# Classes as custom data types class Student: pass . object_1 = Student() . type(object_1) . __main__.Student . object_2 = Student() . object_1 . &lt;__main__.Student at 0x288a7e26148&gt; . object_2 . &lt;__main__.Student at 0x288a88928c8&gt; . isinstance(object_1, Student) . True . object_1.name = &#39;Michel&#39; object_1.email = &#39;Michel@xyz.com&#39; . object_1.name . &#39;Michel&#39; . object_1.school . AttributeError Traceback (most recent call last) &lt;ipython-input-12-68b03d9bbaba&gt; in &lt;module&gt; -&gt; 1 object_1.school AttributeError: &#39;Student&#39; object has no attribute &#39;school&#39; . object_3 = Student() object_3.name . AttributeError Traceback (most recent call last) &lt;ipython-input-13-b5626ff88877&gt; in &lt;module&gt; 1 object_3 = Student() -&gt; 2 object_3.name AttributeError: &#39;Student&#39; object has no attribute &#39;name&#39; . class Student: name = &quot;&quot; score = 0 active = True . s1 = Student() . s1.name = &quot;John&quot; s1.score = 50 s1.name, s1.score, s1.active . (&#39;John&#39;, 50, True) . # Initializing # special methods are marked with __methodname__ class Student: def __init__(self): # can be anything, but self is standard print(&#39;Initialize called!&#39;) . s1 = Student() . Initialize called! . s2 = Student() s3 = Student() . Initialize called! Initialize called! . class Student: def __init__(self, name): # can be anything, but self is standard self.name = name # self refers to the current instance self.mail = name + &quot;.&quot; + &quot;@xyz.com&quot; . s1 = Student(&quot;Felix&quot;) s1.mail . &#39;Felix.@xyz.com&#39; . del s1.mail s1.mail . AttributeError Traceback (most recent call last) &lt;ipython-input-8-0ed8e4b3810a&gt; in &lt;module&gt; 1 del s1.mail -&gt; 2 s1.mail AttributeError: &#39;Student&#39; object has no attribute &#39;mail&#39; . class Competition: # class variable raise_amount = 1.04 def __init__(self, name, prize): self.name = name self.prize = prize def raise_prize(self): self.prize = self.prize * raise_amount . debate = Competition(&#39;Debate&#39;, 500) print(debate.raise_amount) . 1.04 . Competition.raise_amount . 1.04 . debate.__dict__ . {&#39;name&#39;: &#39;Debate&#39;, &#39;prize&#39;: 500} . Competition.__dict__ . mappingproxy({&#39;__module__&#39;: &#39;__main__&#39;, &#39;raise_amount&#39;: 1.04, &#39;__init__&#39;: &lt;function __main__.Competition.__init__(self, name, prize)&gt;, &#39;raise_prize&#39;: &lt;function __main__.Competition.raise_prize(self)&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Competition&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;Competition&#39; objects&gt;, &#39;__doc__&#39;: None}) . debate.raise_amount = 10 debate.__dict__ # new instance attribute is added . {&#39;name&#39;: &#39;Debate&#39;, &#39;prize&#39;: 500, &#39;raise_amount&#39;: 10} . class Competition: def __init__(self, name, prize): self.name = name self.prize = prize self.participants = [] . debate = Competition(&#39;Debate&#39;, 500) debate.participants . [] . Competition.participants . AttributeError Traceback (most recent call last) &lt;ipython-input-5-ea531b615844&gt; in &lt;module&gt; -&gt; 1 Competition.participants AttributeError: type object &#39;Competition&#39; has no attribute &#39;participants&#39; . debate.participants.append(&#39;Alice&#39;) . debate.participants . [&#39;Alice&#39;] . # instance and class variables are public by default # hack for private attributes: class Dog: def __init__(self, name, breed): self.__name = name self.__breed = breed def print_details(self): print(&#39;My name is %s and I am a %s&#39; % (self.__name, self.__breed)) . d1 = Dog(&quot;Moje&quot;, &quot;Golden Retriever&quot;) d1.print_details() . My name is Moje and I am a Golden Retriever . d1.__dict__ . {&#39;_Dog__name&#39;: &#39;Moje&#39;, &#39;_Dog__breed&#39;: &#39;Golden Retriever&#39;} . d1.__name = &quot;Oba&quot; d1.print_details() # doesn&#39;t update . My name is Moje and I am a Golden Retriever . d1.__dict__ # new attribute created . {&#39;_Dog__name&#39;: &#39;Moje&#39;, &#39;_Dog__breed&#39;: &#39;Golden Retriever&#39;, &#39;__name&#39;: &#39;Oba&#39;} . d1._Dog__breed = &quot;Husky&quot; # makes it harder to change, but can be changed d1.print_details() . My name is Moje and I am a Husky . .",
            "url": "https://elydora.github.io/DataScienceBlog/2020/06/26/Getting-Started.html",
            "relUrl": "/2020/06/26/Getting-Started.html",
            "date": " • Jun 26, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "# special methods class Competition: def __init__(self, name, prizes): self.__name = name self.__prize = prizes rowing = Competition(&quot;Rowing&quot;, 10000) . print(rowing) . &lt;__main__.Competition object at 0x000001D68AE718C8&gt; . rowing . &lt;__main__.Competition at 0x1d68ae718c8&gt; . class Competition: def __init__(self, name, prizes): self.__name = name self.__prize = prizes def __repr__(self): # representation for print function, if __str__ is not defined return &quot;(&#39;{}&#39;, {})&quot;.format(self.__name, self.__prize) . archery = Competition(&quot;Archery&quot;, 8000) . print(archery) . (&#39;Archery&#39;, 8000) . str(archery) # looks for special method __str__() . &#34;(&#39;Archery&#39;, 8000)&#34; . repr(archery) . &#34;(&#39;Archery&#39;, 8000)&#34; . class Competition: def __init__(self, name, country, prize): self.__name = name self.__country = country self.__prize = prize def get_name_country(self): return &#39;{} {}&#39;.format(self.__name, self.__country, self.__prize) def __repr__(self): # representation for print function return &quot;Competition: {} held in {}, prize: {}&quot;.format(self.__name, self.__country, self.__prize) def __str__(self): return &quot;&#39;{} - {}&#39;&quot;.format(self.get_name_country(), self.__prize) . archery = Competition(&quot;Archery&quot;, &quot;United Kingdom&quot;, 7500) archery . Competition: Archery held in United Kingdom, prize: 7500 . print(archery) . &#39;Archery United Kingdom - 7500&#39; . # the add method 1 + 2 . 3 . int.__add__(1, 2) . 3 . str.__add__(&quot;a&quot;, &quot;b&quot;) . &#39;ab&#39; . class Savings: def __init__(self, amount): self.__amount = amount . s1 = Savings(1000) s2 = Savings(22000) . s1 + s2 . TypeError Traceback (most recent call last) &lt;ipython-input-27-07ecabcb1b41&gt; in &lt;module&gt; -&gt; 1 s1 + s2 TypeError: unsupported operand type(s) for +: &#39;Savings&#39; and &#39;Savings&#39; . class Savings: def __init__(self, amount): self.__amount = amount def __add__(self, other): return self.__amount + other.__amount . s1 = Savings(1000) s2 = Savings(22000) s1 + s2 . 23000 . # sub method class Savings: def __init__(self, amount): self.__amount = amount def __add__(self, other): return self.__amount + other.__amount def __sub__(self, other): return self.__amount - other.__amount . s1 = Savings(5000) s2 = Savings(457) s1 - s2 . 4543 . ## mul method 1.0 * 2.1 . 2.1 . float.__mul__(1.0, 2.1) . 2.1 . float.__mul__(1, 2.1) . TypeError Traceback (most recent call last) &lt;ipython-input-37-ee0b82aa5938&gt; in &lt;module&gt; -&gt; 1 float.__mul__(1, 2.1) TypeError: descriptor &#39;__mul__&#39; requires a &#39;float&#39; object but received a &#39;int&#39; . 10 // 3 . 3 . int.__floordiv__(10, 3) . 3 . int.__mod__(4, 2) . 0 . int.__mod__(10, 3) . 1 . int.__pow__(6, 2) . 36 . len(&quot;test&quot;) . 4 . str.__len__(&quot;test&quot;) . 4 . some_list = [1, 4, 5, 7, 2] len(some_list) . 5 . class Participants: def __init__(self): self.__participants = [] def add_participants(self, name): self.__participants.append(name) def __len__(self): return len(self.__participants) . participants = Participants() participants.add_participants(&quot;Felix&quot;) participants.add_participants(&quot;Johan&quot;) participants.add_participants(&quot;Max&quot;) . len(participants) . 3 . # Properties class Wrestler: def __init__(self): self.__name = &quot;&quot; def set_name(self, name): print(&quot;setter method called&quot;) self.__name = name def get_name(self): print(&quot;getter method called&quot;) return self.__name def del_name(self): del self.__name name = property(get_name, set_name, del_name) . w = Wrestler() . w.name = &quot;Kart&quot; . setter method called . w.name . getter method called . &#39;Kart&#39; . # Properties with Decorators class WrestlerNew: def __init__(self, name): self.__name = name @property # this is the method for accessing def name(self): print(&quot;getter method called&quot;) return self.__name @name.setter # this is the method for setting new vals def name(self, value): print(&quot;setter method called&quot;) self.__name = value @name.deleter def name(self): del self.__name . w1 = WrestlerNew(&quot;Rey&quot;) . w1.name . getter method called . &#39;Rey&#39; . # Class Methods / Static Methods class Competition: __raise_amount = 1.04 # class variable def __init__(self, name, country, prize): self.__name = name self.__country = country self.__prize = prize def raise_prize(self): self.__prize = self.__prize * self.__raise_amount def get_name_country(self): return &#39;{} {}&#39;.format(self.__name, self.__country, self.__prize) def __repr__(self): # representation for print function return &quot;Competition: {} held in {}, prize: {}&quot;.format(self.__name, self.__country, self.__prize) def __str__(self): return &quot;&#39;{} - {}&#39;&quot;.format(self.get_name_country(), self.__prize) @classmethod def get_raise_amount(cls): return cls.__raise_amount @classmethod def set_raise_amount(cls, amount): cls.__raise_amount = amount . c1 = Competition(&quot;Running&quot;, &quot;Germany&quot;, 50000) . c1.set_raise_amount(2) . c1.get_raise_amount() . 2 . Competition.get_raise_amount() . 2 . class Rectangle: @staticmethod # cannot access class variables def area(x,y): return x * y . Rectangle.area(5,5) . 25 . from abc import ABC, abstractmethod class Hominidae(): def diet(self): pass def walk(self): pass def behavior(self): print(&quot;Blabla&quot;) . chimpanzee = Hominidae() chimpanzee.behavior() . Blabla . class Human(Hominidae): def diet(self): print(&quot;Omnivorous&quot;) def walk(self): print(&quot;Bipeds&quot;) . paul = Human() paul.diet() . Omnivorous . class Hominidae(ABC): def diet(self): pass def walk(self): pass def behavior(self): print(&quot;Blabla&quot;) . h = Hominidae() . h.behavior() . Blabla . h.diet() . class Human(Hominidae): def diet(self): print(&quot;Omnivorous&quot;) def walk(self): print(&quot;Bipeds&quot;) . myra = Human() myra.diet() myra.walk() . Omnivorous Bipeds . class Hominidae(ABC): @abstractmethod # how to do it def diet(self): pass @abstractmethod def walk(self): pass def behavior(self): print(&quot;Blabla&quot;) . h1 = Hominidae() . TypeError Traceback (most recent call last) &lt;ipython-input-131-df612faa022d&gt; in &lt;module&gt; -&gt; 1 h1 = Hominidae() TypeError: Can&#39;t instantiate abstract class Hominidae with abstract methods diet, walk . .",
            "url": "https://elydora.github.io/DataScienceBlog/2020/06/26/Advanced-Functionality-in-Python-Classes.html",
            "relUrl": "/2020/06/26/Advanced-Functionality-in-Python-Classes.html",
            "date": " • Jun 26, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://elydora.github.io/DataScienceBlog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://elydora.github.io/DataScienceBlog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://elydora.github.io/DataScienceBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://elydora.github.io/DataScienceBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}